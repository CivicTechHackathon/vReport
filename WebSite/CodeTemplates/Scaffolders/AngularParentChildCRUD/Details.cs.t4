<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; #>
<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>
@{
    ViewBag.Title = "<#= Model.ViewName #>";
    ViewBag.NgModule = "<#= Model.ViewDataTypeName ?? String.Empty #>";
    ViewBag.NgController = "<#= Model.ViewDataTypeName ?? String.Empty #>Controller";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<# } #>
@* This partial view defines form fields that will appear when creating and editing entities *@

<div class="portlet light bordered" ng-init="vm.get<#= Model.ViewDataTypeName ?? String.Empty #>ById(@ViewBag.Id)">
	<div class="portlet-title">
		<div class="caption font-red-sunglo">
			<i class="fa fa-info font-red-sunglo"></i>
			<span class="caption-subject bold uppercase"> <#= Model.ViewDataTypeName ?? String.Empty #> Details</span>
		</div>
	</div>
	<div class="portlet-body form">
	<#
	foreach (ModelProperty property in GetModelProperties(Model.ViewDataType, false)) {
		if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly) {
			if (property.Type.UnderlyingTypeIs<bool>()) {
#>
		<div class="form-group form-md-line-input col-md-6">
			<#= property.Name #>

			<div class="form-control-focus"><strong><input type="checkbox" name="" class="form-control" ng-model="vm.<#= Model.ViewDataTypeName ?? String.Empty #>.<#= property.Name #>" /></strong></div>
		</div>
		<# 
			} else if (property.Type.UnderlyingTypeIs<DateTime>()) {
#>
		<div class="form-group form-md-line-input col-md-6">
			<#= property.Name #>

			<div class="form-control-focus"><strong>{{vm.<#= Model.ViewDataTypeName ?? String.Empty #>.<#= property.Name #>  | date : 'dd-MMMM-yyyy'}}</strong></div>
		</div>
		<# 
			} else {
#>
		<div class="form-group form-md-line-input col-md-6">
			<#= property.Name #>

			<div class="form-control-focus"><strong>{{vm.<#= Model.ViewDataTypeName ?? String.Empty #>.<#= property.Name #>}}</strong></div>
		</div>
		<#
			}
		}
	}
#>

<# foreach (RelatedEntityInfo relation in ParentRelations) { #>
<div class="form-group form-md-line-input">
			<#= relation.RelationProperty.Name #>

			<div class="form-control-focus"><strong>{{vm.<#= Model.ViewDataTypeName ?? String.Empty #>.<#= relation.RelationProperty.Name #>}}</strong></div>
		</div>
<# } #>


<# foreach (RelatedEntityInfo relation in DetailRelations) { #>
			<h4><#= relation.RelationName  #></h4>
			<table class="cell-border table table-responsive table-striped">
				<thead>
					<tr>
				<# foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {
					if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly && property.Name != "CreatedBy" && property.Name != "UpdatedBy" && property.Name != "CreatedDate" && property.Name != "UpdatedDate") { #>
						<td><#= property.Name #></td>
				<#  } 	} #>
					</tr>
				</thead>
				<tbody>
					<tr ng-repeat="row in vm.<#= Model.ViewDataTypeName ?? String.Empty #>.<#= relation.RelationName ?? String.Empty #>">
					<# foreach (ModelProperty property in GetModelProperties(relation.RelatedEntityType, false)) {
						if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly && property.Name != "CreatedBy" && property.Name != "UpdatedBy" && property.Name != "CreatedDate" && property.Name != "UpdatedDate") { #>
						<td class="form-control-focus">{{row.<#= property.Name #>}}</td>
						<# } } #> 
					</tr>
				</tbody>
			</table>
		<# } #>
		</div>
		<div class="input-group">
			@Html.ActionLink("Edit", "Edit", new { id = ViewBag.Id }, new { @class = "btn blue" }) |
			@Html.ActionLink("Back to List", "Index", null, new { @class = "btn green" })
		</div>
	</div>
@section scripts{
<script src="~/Scripts/app/<#= Model.Area ?? String.Empty #>/<#= Model.ViewDataTypeName ?? String.Empty #>Controller.js"></script>
}
<#+
// Describes the information about a property on the model
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(string),
	typeof(decimal),
	typeof(Guid),
	typeof(DateTime),
	typeof(DateTimeOffset),
	typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
	
	foreach (ModelProperty prop in results) {
		if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
			prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
		}
		else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
			prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
		}
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
	}

	return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

	return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}
IEnumerable<RelatedEntityInfo> DetailRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}
// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
	return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}

#>